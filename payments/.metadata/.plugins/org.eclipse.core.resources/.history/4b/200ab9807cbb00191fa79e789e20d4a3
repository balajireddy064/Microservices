package com.ayusha.tktmgmt.data;

import com.ayusha.http.client.ServicesClient;
import com.ayusha.http.client.models.ServiceResponse;
import com.ayusha.http.constants.HTTPConstants;
import com.ayusha.json.utils.JSONConverter;
import com.ayusha.payments.data.models.EstimateDataModel;
import com.ayusha.payments.services.constants.PaymentsServicesConstants;
import com.ayusha.services.common.exceptions.ServicesDataException;

/**
 * 
 * @author author1
 * 07-Aug-2019
 * Gets the ticket data
 *
 */
public class EstimateDataHandler {
	
	/** singleon object reference **/
	private final static EstimateDataHandler estimateDataHandler = new EstimateDataHandler();
	
	/** states data model **/
	private EstimateDataModel estimateDataModel;
	
	/** 
	
	
	/**
	 * default constructor
	 */
	private EstimateDataHandler() {
		
	}
	
	
	/**
	 * returns singleton reference
	 */
	public static EstimateDataHandler getInstance() {
		return estimateDataHandler;
	}
	
	/**
	 * get ticket data
	 */
	public EstimateDataModel getEstimateForEstimateId(String estimateId) throws ServicesDataException{
		
		ServicesClient servicesClient = null;
		ServiceResponse serviceResponse = null;
		ServicesDataException servicesDataException = null;
		EstimateDataModel estimateDataModel = null;
		String serviceName=PaymentsServicesConstants.GET_ESTIMATE_FOR_ESTIMATEID_SERVICE_NAME;
		
		serviceName = serviceName.replace("$1", estimateId);
		
		servicesClient = ServicesClient.getInstance();
		try {
			serviceResponse = servicesClient.execute(serviceName,"",HTTPConstants.GET);
			estimateDataModel = ((EstimateDataModel)JSONConverter.convertStringToPOJO(""+serviceResponse.getResponse(),EstimateDataModel.class));
			if(estimateDataModel==null) {
				estimateDataModel= new EstimateDataModel();
				
			}
			return estimateDataModel;
		}catch(Exception e) {
			estimateDataModel= new EstimateDataModel();
			return estimateDataModel;
		}
	}
	
	/**
	 * get ticket data
	 */
	public EstimateDataModel getEstimateForJobCode(String jobCode) throws ServicesDataException{
		
		ServicesClient servicesClient = null;
		ServiceResponse serviceResponse = null;
		ServicesDataException servicesDataException = null;
		EstimateDataModel estimateDataModel = null;
		String serviceName=PaymentsServicesConstants.GET_ESTIMATE_FOR_JOBCODE_SERVICE_NAME;
		
		serviceName = serviceName.replace("$1", jobCode);
		
		servicesClient = ServicesClient.getInstance();
		try {
			serviceResponse = servicesClient.execute(serviceName,"",HTTPConstants.GET);
			estimateDataModel = ((EstimateDataModel)JSONConverter.convertStringToPOJO(""+serviceResponse.getResponse(),EstimateDataModel.class));
			if(estimateDataModel==null) {
				estimateDataModel= new EstimateDataModel();
				
			}
			return estimateDataModel;
		}catch(Exception e) {
			estimateDataModel= new EstimateDataModel();
			return estimateDataModel;
		}
	}
	
	
	
	/**
	 * get ticket data
	 */
	public void updateEstimate(EstimateDataModel estimateDataModel) throws ServicesDataException{
		
		ServicesClient servicesClient = null;
		ServiceResponse serviceResponse = null;
		ServicesDataException servicesDataException = null;
		
		String updateServiceName=PaymentsServicesConstants.UPDATE_ESTIMATE_SERVICE_NAME;
	
		servicesClient = ServicesClient.getInstance();
		try {
			System.out.println(" PAYLOAD "+JSONConverter.convertPOJOToString(estimateDataModel));
			serviceResponse = servicesClient.execute(updateServiceName,JSONConverter.convertPOJOToString(estimateDataModel),HTTPConstants.POST);
		}catch(Exception e) {
			servicesDataException = new ServicesDataException();
			servicesDataException.setErrorCode(HTTPConstants.INTERNAL_ERROR);
			servicesDataException.setErrorMessage(HTTPConstants.HTTP_INTERNAL_ERROR_MESSAGE);
			throw servicesDataException;
		}	
	}
	
	/**
	 * get ticket data
	 */
	public EstimateDataModel addCity(EstimateDataModel estimateDataModel) throws ServicesDataException{
		
		ServicesClient servicesClient = null;
		ServiceResponse serviceResponse = null;
		ServicesDataException servicesDataException = null;
		
		String updateServiceName=PaymentsServicesConstants.ADD_ESTIMATESERVICE_NAME;
	
		servicesClient = ServicesClient.getInstance();
		try {
			System.out.println(" PAYLOAD "+JSONConverter.convertPOJOToString(estimateDataModel));
			serviceResponse = servicesClient.execute(updateServiceName,JSONConverter.convertPOJOToString(estimateDataModel),HTTPConstants.POST);
		}catch(Exception e) {
			servicesDataException = new ServicesDataException();
			servicesDataException.setErrorCode(HTTPConstants.INTERNAL_ERROR);
			servicesDataException.setErrorMessage(HTTPConstants.HTTP_INTERNAL_ERROR_MESSAGE);
			throw servicesDataException;
		}	
		
		return estimateDataModel;
	}
}
