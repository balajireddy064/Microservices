package com.ayusha.general.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ayusha.general.services.data.model.CountriesDataModel;
import com.ayusha.general.services.data.model.CountryDataModel;
import com.ayusha.general.services.data.model.StateDataModel;
import com.ayusha.general.services.entity.CountryEntity;
import com.ayusha.general.services.entity.StateEntity;
import com.ayusha.general.services.repository.IStateRepository;
import com.ayusha.services.common.exceptions.DataPersistenceOperationException;
import com.ayusha.services.common.exceptions.InvalidServiceRequestException;
import com.ayusha.services.common.exceptions.ResourceNotFoundException;
import com.custom.logger.logging.Logger;
import com.custom.logger.manager.LogManager;



/**
 * 
 * @author author1
 * Date : 01-Aug-2019
 * Ticket Model class
 * 
 * 1. Recording (single):
 *      a. Persisting in DB
 *      b. on Success - sending an email/sms to customer
 *      c. assigning service invoking
 * 
 * 2. Update:
 *     a. On change of status - sending an email/sms notification
 *     
 * 3. Batch Recording:
 *     a.  Persisting in DB
 *     b. on Success - sending an email/sms to customer -seggregating and sending an single email
 *     c. assigning service invoking - Individually
 *      
 *  4. Search:
 *      a. search based on date, user, customer,logged date, issue,servicetype,serialnumber
 *      
 *  5. Sorting:
 *      a. soring based on logged date,status,servicetype (ASC | DSC)
 */
@Service
public class StateService implements IStateService{
	
	/** LOGGER **/
	private static Logger LOG = LogManager.getLogger(StateService.class);
	
	/** repository **/
	@Autowired
	private IStateRepository iStateRepository;
	
	
	
	/**
	 * default constructor
	 */
	public StateService() {
		LOG.info("Ticket Service Constructor");
	}
	
	/**
	 * add ticket
	 */
	public StateDataModel save(StateDataModel stateDataModel) throws DataPersistenceOperationException,InvalidServiceRequestException{
		
		StateEntity stateEntity = new StateEntity();
		stateEntity.setStateCode(stateDataModel.getStatecode());
		stateEntity.setCountryCode(stateDataModel.get);
		stateEntity.setName(stateDataModel.getName());
		iStateRepository.save(countryEntity);
		return countryDataModel;
	}
	
	/** find job notes by id **/
	public CountryDataModel getCountry(String countryId) throws DataPersistenceOperationException,InvalidServiceRequestException,ResourceNotFoundException,Exception{
		CountryEntity countryEntity = iStateRepository.findCountryByIdId(countryId);
		CountryDataModel countryDataModel = new CountryDataModel();
		countryDataModel.setCountryCode(countryEntity.getCountryCode());
		countryDataModel.setName(countryEntity.getName());
		return countryDataModel;
	}
	
	/** find job notes by id **/
	public CountriesDataModel getCountries() throws DataPersistenceOperationException,InvalidServiceRequestException,ResourceNotFoundException,Exception{
		CountryEntity countryEntity = null;
		CountryDataModel countryDataModel = new CountryDataModel();
		List<CountryEntity> lstCountryEntities = iStateRepository.findAllCountries();
		
		List<CountryDataModel> lstCountryDataModel = new ArrayList();
		int size =0;
		size = lstCountryEntities.size();
		
		for(int index=0; index<size; index++) {
			countryDataModel = new CountryDataModel();
			countryEntity = lstCountryEntities.get(index);
			countryDataModel.setCountryCode(countryEntity.getCountryCode());
			countryDataModel.setName(countryEntity.getName());
			lstCountryDataModel.add(countryDataModel);
		}
		
		CountriesDataModel countriesDataModel = new CountriesDataModel();
		countriesDataModel.setLstCountryDataModel(lstCountryDataModel);
		return countriesDataModel;
	}
	
}
