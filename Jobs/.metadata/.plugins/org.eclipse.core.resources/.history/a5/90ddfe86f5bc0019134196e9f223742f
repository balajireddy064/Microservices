package com.ayusha.job.services.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ayusha.job.data.models.JobDataModel;
import com.ayusha.job.data.models.JobsDataModel;
import com.ayusha.job.service.IJobService;
import com.ayusha.job.services.repository.IJobRepository;
import com.ayusha.json.utils.JSONConverter;
import com.ayusha.services.common.exceptions.DataPersistenceOperationException;
import com.ayusha.services.common.exceptions.InvalidServiceRequestException;
import com.ayusha.services.common.exceptions.ResourceNotFoundException;
import com.ayusha.services.common.exceptions.ServiceRequestProcessor;
import com.ayusha.ticket.data.models.TicketDataModel;
import com.custom.logger.logging.Logger;
import com.custom.logger.manager.LogManager;

/**
* This is the service api interface.
* This controls the access to the services
*
* @author  author1r
* @version 1.0
* @since   2019-05-03 
*/
@RestController
@RequestMapping("/jobs/job")
public class JobServicesController extends ServiceRequestProcessor{
	
	/** Logger **/
	private static Logger LOG = LogManager.getLogger(JobServicesController.class);
	
	/** repository **/
	@Autowired
	private IJobService iJobService;
	
	/** repository **/
	@Autowired
	private IJobRepository iJobRepository;
	/**
	 * 
	 * 
	 */
	@PostMapping("/create")
	public String createJob(@RequestBody String requestBody,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered job notes creation - start");
		
		return "";
	}
	
	/**
	 * 
	 * 
	 */
	@PostMapping("/add")
	public String addJob(@RequestBody String requestBody,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered job notes creation - start");
		JobDataModel jobDataModel = (JobDataModel)JSONConverter.convertStringToPOJO(requestBody, JobDataModel.class);
		iJobService.save(jobDataModel);
		return JSONConverter.convertPOJOToString(jobDataModel);
	}
	/**
	 * 
	 * 
	 */
	@GetMapping("/findJobsForUserId")
	public String findJobsForUserId(@RequestParam("userid") String userId,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered job notes creation - start");
		
		/**
		 * 1. Get List of Jobs for user and status
		 * 2. For each Job fetch the Job details
		 * 3. For eacj Job feych the ticket ID
		 * 4. For each Ticket find the ticket details
		 */
		JobsDataModel jobsDataModel = iJobService.getJobsFor(userId);
		return JSONConverter.convertPOJOToString(jobsDataModel);
	}
	
	/**
	 * 
	 * 
	 */
	@GetMapping("/assign")
	public String createJob(@RequestBody String requestBody,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered job notes creation - start");
		
		/**
		 * 1. Get List of Jobs for user and status
		 * 2. For each Job fetch the Job details
		 * 3. For eacj Job feych the ticket ID
		 * 4. For each Ticket find the ticket details
		 */
		TicketDataModel ticketDataModel = (TicketDataModel)JSONConverter.convertStringToPOJO(requestBody, TicketDataModel.class);
		return JSONConverter.convertPOJOToString(ticketDataModel);
	}
	
	/**
	 * "/findJobsForStatusId"
	 * findJobsForUserId
	 * findJobForTicketId
	 * findJobForJobId
	 * 
	 */
	@GetMapping("/findJobsForStatusId")
	public String findJobsForUserIdAndStatus(@RequestParam("userid") String userId,@RequestParam("statusid") String statusId,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered job notes creation - start");
		
		/**
		 * 1. Get List of Jobs for user and status
		 * 2. For each Job fetch the Job details
		 * 3. For eacj Job feych the ticket ID
		 * 4. For each Ticket find the ticket details
		 */
	
		JobsDataModel jobsDataModel = iJobService.getJobsFor(userId, statusId);
		return JSONConverter.convertPOJOToString(jobsDataModel);
	}
	
	/**
	 * 
	 * 
	 */
	@GetMapping("/findJobForTicketId")
	public String findJobForTicketId(@RequestParam("ticketid") String ticketid,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered job notes creation - start");
		/**
		 * 1. Get List of Jobs for user and status
		 * 2. For each Job fetch the Job details
		 * 3. For eacj Job feych the ticket ID
		 * 4. For each Ticket find the ticket details
		 */
		
		return "";
	}
	
	/**
	 * 
	 * 
	 */
	@GetMapping("/findJobForJobId")
	public String findJob(@RequestParam("jobid") String jobId,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered symptoms finding - start chedddd");
		
		return JSONConverter.convertPOJOToString(iJobService.getJob(jobId));
	}
	
}
