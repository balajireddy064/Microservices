package com.ayusha.repair.services.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ayusha.json.utils.JSONConverter;
import com.ayusha.repair.services.entity.Customer;
import com.ayusha.repair.services.entity.Ticket;
import com.ayusha.services.common.exceptions.DataPersistenceOperationException;
import com.ayusha.services.common.exceptions.InvalidServiceRequestException;
import com.ayusha.services.common.exceptions.ResourceNotFoundException;
import com.ayusha.services.common.exceptions.ServiceRequestProcessor;
import com.ayusha.ticketmgmt.repository.ICustPersistantRepository;
import com.ayusha.ticketmgmt.service.TicketService;
import com.ayusha.tktmgmt.models.CustomerMgmtDataModel;
import com.custom.logger.logging.Logger;
import com.custom.logger.manager.LogManager;

/**
* This is the service api interface.
* This controls the access to the services
*
* @author  author1r
* @version 1.0
* @since   2019-05-03 
*/
@RestController
@RequestMapping("/custmgmt")
public class CustomerManagementController extends ServiceRequestProcessor{
	
	/** Logger **/
	private static Logger LOG = LogManager.getLogger(CustomerManagementController.class);
	
	/** ticket Services **/
	@Autowired
	private TicketService ticketService=null;
	
	/** repository **/
	@Autowired
	private ICustPersistantRepository iCustomerRepository;
	/**
	 * 
	 * 
	 */
	@PostMapping("/add")
	public String addTicket(@RequestBody String requestBody,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("Successfully triggered add ticket operation");
		String strRequestBody = preProcess(requestBody,httpServletRequest,httpServletResponse);
		
		strRequestBody = postProcess(requestBody,httpServletRequest,httpServletResponse);
		Ticket ticket = (Ticket)JSONConverter.convertStringToPOJO(requestBody, Ticket.class);
		ticketService.recordNewTicket(ticket);
		LOG.info("Successfully completed add ticket operation "+ticket.getCustomerid());
		return "Successfully Added Ticket-REPO";
	}
	/**
	 * 
	 * 
	 */
	@PostMapping("/update")
	public String updateCustomer(@RequestBody String requestBody,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		
		LOG.info("Successfully triggered update customer operation");
		String strRequestBody = preProcess(requestBody,httpServletRequest,httpServletResponse);
		
		strRequestBody = postProcess(requestBody,httpServletRequest,httpServletResponse);
		CustomerMgmtDataModel customerMgmtDataModel = (CustomerMgmtDataModel)JSONConverter.convertStringToPOJO(requestBody, CustomerMgmtDataModel.class);
		
		
		Customer customer = iCustomerRepository.findCustomerById(customerMgmtDataModel.getCustomerId());
		
		if(customerMgmtDataModel.getAddr1()!=null && customerMgmtDataModel.getAddr1().trim().length()>0) {
			customer.setAddr1(customerMgmtDataModel.getAddr1());
		}
		if(customerMgmtDataModel.getAddr2()!=null && customerMgmtDataModel.getAddr2().trim().length()>0) {
			customer.setAddr2(customerMgmtDataModel.getAddr2());
		}
		if(customerMgmtDataModel.getAddr3()!=null && customerMgmtDataModel.getAddr3().trim().length()>0) {
			customer.setAddr3(customerMgmtDataModel.getAddr3());
		}
		if(customerMgmtDataModel.getPin()!=null && customerMgmtDataModel.getPin().trim().length()>0) {
			customer.setPin(customerMgmtDataModel.getPin());
		}
		if(customerMgmtDataModel.getCity()!=null && customerMgmtDataModel.getCity().trim().length()>0) {
			customer.setCity(customerMgmtDataModel.getCity());
		}
		if(customerMgmtDataModel.getFirstName()!=null && customerMgmtDataModel.getFirstName().trim().length()>0) {
			customer.setFirstName(customerMgmtDataModel.getFirstName());
		}
		if(customerMgmtDataModel.getMiddleName()!=null && customerMgmtDataModel.getMiddleName().trim().length()>0) {
			customer.setMiddleName(customerMgmtDataModel.getMiddleName());
		}
		if(customerMgmtDataModel.getLastName()!=null && customerMgmtDataModel.getLastName().trim().length()>0) {
			customer.setLastName(customerMgmtDataModel.getLastName());
		}
		
		if(customerMgmtDataModel.getPhoneNumber()!=null && customerMgmtDataModel.getPhoneNumber().trim().length()>0) {
			customer.setPhoneNumber(customerMgmtDataModel.getPhoneNumber());
		}
		
		if(customerMgmtDataModel.getEmail()!=null && customerMgmtDataModel.getEmail().trim().length()>0) {
			customer.setEmail(customerMgmtDataModel.getEmail());
		}
		LOG.info("Successfully completed add customer operation ==========================================="+customer.getCity());
		iCustomerRepository.save(customer);
		LOG.info("Successfully completed add customer operation "+customer.getCustomerId());
		
		/**
		 * 1. Process the request, ex: unzipping, decoding and decrypting
		 * 2. Perform the Re service operation
		 * 3. Perform the response building
		 * 4. Perform post processing like encrypting, zipping and encoding
		 * 5. Service data validation will be done at service level
		 * 6. Service operations will be done at service level not here.
		 */
		
		LOG.info("Successfully completed update ticket operation");
		return "Successfully Added Ticket-REPO";
	}
}
