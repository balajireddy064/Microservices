package com.ayusha.repair.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ayusha.repair.services.data.models.JobNotesDataModel;
import com.ayusha.repair.services.data.models.SymptomDataModel;
import com.ayusha.repair.services.data.models.SymptomsDataModel;
import com.ayusha.repair.services.entity.JobNotesEntity;
import com.ayusha.repair.services.repository.IJobNotesRepository;
import com.ayusha.services.common.exceptions.DataPersistenceOperationException;
import com.ayusha.services.common.exceptions.InvalidServiceRequestException;
import com.ayusha.services.common.exceptions.ResourceNotFoundException;
import com.custom.logger.logging.Logger;
import com.custom.logger.manager.LogManager;



/**
 * 
 * @author author1
 * Date : 01-Aug-2019
 * Ticket Model class
 * 
 * 1. Recording (single):
 *      a. Persisting in DB
 *      b. on Success - sending an email/sms to customer
 *      c. assigning service invoking
 * 
 * 2. Update:
 *     a. On change of status - sending an email/sms notification
 *     
 * 3. Batch Recording:
 *     a.  Persisting in DB
 *     b. on Success - sending an email/sms to customer -seggregating and sending an single email
 *     c. assigning service invoking - Individually
 *      
 *  4. Search:
 *      a. search based on date, user, customer,logged date, issue,servicetype,serialnumber
 *      
 *  5. Sorting:
 *      a. soring based on logged date,status,servicetype (ASC | DSC)
 */
@Service
public class RepairSymptomsService implements IRepairSymptomsService{
	
	/** LOGGER **/
	private static Logger LOG = LogManager.getLogger(RepairSymptomsService.class);
	
	/** repository **/
	@Autowired
	private IRepairSymptomsService iRepairSymptomsService;
	
	
	
	/**
	 * default constructor
	 */
	public RepairSymptomsService() {
		LOG.info("Ticket Service Constructor");
	}
	
	/**
	 * add ticket
	 */
	public SymptomDataModel save(SymptomDataModel symptomDataModel) throws DataPersistenceOperationException,InvalidServiceRequestException{
		iRepairSymptomsService.save(symptomDataModel);
		return symptomDataModel;
	}
		
	/** find job notes by id **/
	public SymptomsDataModel getSymptomsDataModel(String jobId) throws DataPersistenceOperationException,InvalidServiceRequestException,ResourceNotFoundException,Exception{
		SymptomsDataModel symptomsDataModel = new SymptomsDataModel();
		symptomsDataModel.setJob_id(jobId);
		symptomsDataModel.setLstSymptoms(iRepairSymptomsService.getSymptomsDataModel(jobId));
		return symptomsDataModel;
	}
	
	/**
	 * add ticket
	 */
	public void deleteSymptoms(String jobId) throws DataPersistenceOperationException,InvalidServiceRequestException{
		
	}
	
	/**
	 * add ticket
	 */
	public void updateSymptoms(SymptomsDataModel jobSymptomsDataModel) throws DataPersistenceOperationException,InvalidServiceRequestException{
		
	}
	
	
}
