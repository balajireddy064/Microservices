package com.ayusha.job.inventory.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ayusha.job.inventory.data.models.PartIssuedDataModel;
import com.ayusha.job.inventory.data.models.PartReturnedDataModel;
import com.ayusha.job.inventory.data.models.PartsIssuedDataModel;
import com.ayusha.job.inventory.data.models.PartsReturnedDataModel;
import com.ayusha.job.inventory.services.entity.PartIssuedEntity;
import com.ayusha.job.inventory.services.entity.PartReturnedEntity;
import com.ayusha.job.inventory.services.repository.IPartsIssuedRepository;
import com.ayusha.json.utils.JSONConverter;
import com.ayusha.services.common.exceptions.DataPersistenceOperationException;
import com.ayusha.services.common.exceptions.InvalidServiceRequestException;
import com.ayusha.services.common.exceptions.ResourceNotFoundException;
import com.custom.logger.logging.Logger;
import com.custom.logger.manager.LogManager;



/**
 * 
 * @author author1
 * Date : 01-Aug-2019
 * Ticket Model class
 * 
 * 1. Recording (single):
 *      a. Persisting in DB
 *      b. on Success - sending an email/sms to customer
 *      c. assigning service invoking
 * 
 * 2. Update:
 *     a. On change of status - sending an email/sms notification
 *     
 * 3. Batch Recording:
 *     a.  Persisting in DB
 *     b. on Success - sending an email/sms to customer -seggregating and sending an single email
 *     c. assigning service invoking - Individually
 *      
 *  4. Search:
 *      a. search based on date, user, customer,logged date, issue,servicetype,serialnumber
 *      
 *  5. Sorting:
 *      a. soring based on logged date,status,servicetype (ASC | DSC)
 */
@Service
public class PartsIssuedService implements IPartsIssuedService{
	
	/** LOGGER **/
	private static Logger LOG = LogManager.getLogger(PartsIssuedService.class);
	
	/** repository **/
	@Autowired
	private IPartsIssuedRepository iPartsIssuedRepository;
	
	
	
	/**
	 * default constructor
	 */
	public PartsIssuedService() {
		LOG.info("Ticket Service Constructor");
	}
	
	/**
	 * add ticket
	 */
	public PartsIssuedDataModel save(PartsIssuedDataModel artsIssuedDataModel) throws DataPersistenceOperationException,InvalidServiceRequestException{
		PartIssuedEntity partIssuedEntity = null;
		PartIssuedDataModel partIssuedDataModel = null;
		int size=0;
		
		List<PartIssuedDataModel> lstPartIssuedDataModel= artsIssuedDataModel.getLstPartsIssuedDataModel();
		
		size = lstPartIssuedDataModel.size();
		
		try {
		for(int index=0; index<size;index++) {
			partIssuedDataModel = lstPartIssuedDataModel.get(index);
			partIssuedEntity = new PartIssuedEntity(); 
			partIssuedEntity.setId(partIssuedDataModel.getId());
			partIssuedEntity.setJobId(partIssuedDataModel.getJobId());
			partIssuedEntity.setQuantity(partIssuedDataModel.getQuantity());
			partIssuedEntity.setType(partIssuedDataModel.getType());
			System.out.println(" GGGGGGGGGGGGGGGGGGGGGGGG "+(JSONConverter.convertPOJOToString(partIssuedEntity)));
			iPartsIssuedRepository.save(partIssuedEntity);
		}
		}catch(Exception e) {
			e.printStackTrace();
		}
		return artsIssuedDataModel;
	}
		
	/** find job notes by id **/
	public PartsIssuedDataModel getPartsIssuedDataModel(String jobId) throws DataPersistenceOperationException,InvalidServiceRequestException,ResourceNotFoundException,Exception{
		PartsIssuedDataModel partsIssuedDataModel = new PartsIssuedDataModel();
		partsIssuedDataModel.setJobId(jobId);
		partsIssuedDataModel.setLstPartsIssuedDataModel(getPartsReturned(jobId));
		return partsIssuedDataModel;
	}
	
	/** find job notes by id **/
	public List<PartIssuedDataModel> getPartsIssued(String jobId) throws DataPersistenceOperationException,InvalidServiceRequestException,ResourceNotFoundException,Exception{
		
		List<PartIssuedDataModel> lstPartIssuedDataModel = new ArrayList();
		PartIssuedDataModel partIssuedDataModel = null;
		PartIssuedEntity partIssuedEntity = null;
		int size=0;
		
		List<PartReturnedEntity> lstPartReturnedEntity= iPartsIssuedRepository.findAllReturnedItemsByJobId(jobId);
		
		size = lstPartReturnedEntity.size();
		
		for(int index=0; index<size; index++) {
			partIssuedDataModel = new PartIssuedDataModel();
			partIssuedEntity = lstPartIssuedEntity.get(index);
			partIssuedDataModel.setId(Integer.parseInt(""+partIssuedEntity.getId()));
			partIssuedDataModel.setJobId(partIssuedEntity.getJobId());
			partIssuedDataModel.setPartId(partIssuedEntity.getPartid());
			partIssuedDataModel.setMedia(partIssuedEntity.getMedia());
			partIssuedDataModel.setHeading(partIssuedEntity.getRemarks());
			partIssuedDataModel.setQuantity(partIssuedEntity.getQuantity());
			partIssuedDataModel.setType(partIssuedEntity.getType());
			lstPartIssuedDataModel.add(partIssuedDataModel);
			
		}
		
		return lstPartReturnedDataModel;
	}
	
	
	/**
	 * add ticket
	 */
	public void deletePartsReturned(String jobId) throws DataPersistenceOperationException,InvalidServiceRequestException{
		iPartsIssuedRepository.deleteReturnedItemsByJobId(jobId);
	}
	
	/**
	 * add ticket
	 */
	public void updatePartsReturned(PartsReturnedDataModel partsReturnedDataModel) throws DataPersistenceOperationException,InvalidServiceRequestException{
		save(partsReturnedDataModel);
	}
}
